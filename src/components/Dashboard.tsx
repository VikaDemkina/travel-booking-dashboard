import React, { useEffect, useState } from 'react';\nimport { Box, Container, Grid, Paper, Typography } from '@mui/material';\nimport { Bar, Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { MetricsService } from '../services/MetricsService';\n\n// Register ChartJS components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\n\nconst Dashboard: React.FC = () => {\n  const [buildTimes, setBuildTimes] = useState<{[repo: string]: number}>({});\n  const [buildSuccessRates, setBuildSuccessRates] = useState<{[repo: string]: number}>({});\n  const [deploySuccessRates, setDeploySuccessRates] = useState<{[repo: string]: number}>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      try {\n        // In a real app, you would provide an actual GitHub token\n        const metricsService = new MetricsService('dummy-token');\n        \n        // Fetch metrics\n        const avgBuildTimes = await metricsService.getAverageBuildTime();\n        const buildSuccess = await metricsService.getBuildSuccessRate();\n        const deploySuccess = await metricsService.getDeploySuccessRate();\n        \n        setBuildTimes(avgBuildTimes);\n        setBuildSuccessRates(buildSuccess);\n        setDeploySuccessRates(deploySuccess);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to load metrics');\n        setLoading(false);\n        console.error('Error fetching metrics:', err);\n      }\n    };\n\n    fetchMetrics();\n  }, []);\n\n  const buildTimeData = {\n    labels: Object.keys(buildTimes),\n    datasets: [\n      {\n        label: 'Average Build Time (seconds)',\n        data: Object.values(buildTimes),\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      },\n    ],\n  };\n\n  const successRateData = {\n    labels: Object.keys(buildSuccessRates),\n    datasets: [\n      {\n        label: 'Build Success Rate (%)',\n        data: Object.values(buildSuccessRates),\n        backgroundColor: 'rgba(75, 192, 192, 0.5)',\n      },\n      {\n        label: 'Deploy Success Rate (%)',\n        data: Object.values(deploySuccessRates),\n        backgroundColor: 'rgba(255, 159, 64, 0.5)',\n      },\n    ],\n  };\n\n  if (loading) {\n    return <Typography>Loading metrics...</Typography>;\n  }\n\n  if (error) {\n    return <Typography color=\"error\">{error}</Typography>;\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Microfrontend Performance Dashboard\n        </Typography>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Paper elevation={3} sx={{ p: 2 }}>\n              <Typography variant=\"h6\">Average Build Times</Typography>\n              <Box sx={{ height: 300 }}>\n                <Bar \n                  data={buildTimeData} \n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        title: {\n                          display: true,\n                          text: 'Time (seconds)',\n                        },\n                      },\n                    },\n                  }}\n                />\n              </Box>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12}>\n            <Paper elevation={3} sx={{ p: 2 }}>\n              <Typography variant=\"h6\">Success Rates</Typography>\n              <Box sx={{ height: 300 }}>\n                <Bar \n                  data={successRateData} \n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        max: 100,\n                        title: {\n                          display: true,\n                          text: 'Success Rate (%)',\n                        },\n                      },\n                    },\n                  }}\n                />\n              </Box>\n            </Paper>\n          </Grid>\n        </Grid>\n        \n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h5\">Summary</Typography>\n          <Typography variant=\"body1\" sx={{ mt: 2 }}>\n            This dashboard provides metrics on the efficiency of our microfrontend architecture with polirepo approach. \n            It tracks build times, build success rates, and deployment success rates across all microfrontends.\n          </Typography>\n          <Typography variant=\"body1\" sx={{ mt: 1 }}>\n            The data shows that the polirepo approach offers several advantages:\n          </Typography>\n          <ul>\n            <li><Typography>Independent deployment pipelines for each microfrontend</Typography></li>\n            <li><Typography>Faster build times due to smaller codebase per repository</Typography></li>\n            <li><Typography>Easier team collaboration with clear ownership boundaries</Typography></li>\n            <li><Typography>Better scalability for large microfrontend architectures</Typography></li>\n          </ul>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Dashboard;